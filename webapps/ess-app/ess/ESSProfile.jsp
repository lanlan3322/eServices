<%--
ESSProfile.jsp - Produces the ESSProfile.js used for editing purposes
Copyright (C) 2004 R. James Holton

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2 of the License, or (at your option) 
any later version.  This program is distributed in the hope that it will be 
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General 
Public License for more details.

You should have received a copy of the GNU General Public License along with 
this program; if not, write to the Free Software Foundation, Inc., 
675 Mass Ave, Cambridge, MA 02139, USA. 
--%>

<%@ page contentType="text/html" %>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta http-equiv="Pragma" content="no-cache">
<meta http-equiv="Expires" content="-1">

<title>ESS Profile</title>
</head>

<%@ include file="../CProfile.jsp" %>
<% String jsfile = "ESSProfile.js"; %>
<SCRIPT>
/*
//Personal.js contains site and system specific information
//Copyright 2002 Adisoft, Inc., All Rights Reserved

//These functions are used for customizing the onscreen receipt report
//This section can be costumized for each customer

// Do not modify the contents of the js file as the js file is automatically
// generated by CProfile.jsp.

<%@ include file="Company.jsp" %>

// This is the start of site sub-system specific routines

function getAuditEdit() { 
   return false;
}

function getEditable() {
  var r = true;
  var x = getNameValue(Header,"editable");
  if (x.toUpperCase() == "NO") r = false;
  return r;
}


function getHeadEditHTML(x) {
  if (parent.isClerk || parent.isAuditor) {
     return "head1b.html";
  } else {
     return "head1a.html";
  }
}

function getPurposeHTML(x) {
  return "head2g.html";  //was head2a
}

function getExtraHTML(whichHTML) {
  return "";
}

function getFieldName(x) {
  if (x.toUpperCase() == "LOCATION") x = "Manager";  //Think about system.xml for this
  if (x.toUpperCase() == "PROJECT") x = "Project/Account";
  return x;
}

function getList4Head() {
  //[x,y] where x = field name and y = substring length, 0 means all
  var x = [["xref",0],["begdate",0],["enddate",0],["project",0],["comment",15]];  
  return x;
}

function getHLTagName() {
  return "purpose";
}

function getTLTagName() {
  return "receipt";
}

function ListRepHeader(xrefNum) {
  if (xrefNum != ""){
     if (ReportIsSaved) {
       ListHeader("Reference", xrefNum); 
     } else {
       ListHeader("Reference", xrefNum,"javascript:void parent.contents.OnlyIfChanged('" + defaultHome + "saveXMLFile.html" + "')","Save&nbsp;to&nbsp;Server"); 
     }
     ListHeader("Status", getNameValue(Header,"status"));
  } else {
     if (ReportIsSaved) {
       ListHeader("Status", getNameValue(Header,"status"));
     } else {
       ListHeader("Status", getNameValue(Header,"status"),"javascript:void parent.contents.OnlyIfChanged('" + defaultHome + "saveXMLFile.html" + "')","Save&nbsp;to&nbsp;Server");
     }
  }
  ListHeader("Personnel Number", dispPersNo(getNameValue(Header,"persnum")),"javascript:void parent.contents.TransWindow('" + defaultHead + getHeadEditHTML("head1.html") + "')");
  ListHeader("Name", getNameValue(Header,"name"));  
  ListHeader("Phone", getNameValue(Header,"phone"));
  ListHeader(getFieldName("Location"), getNameValue(Header,"location"));
  ListHeader("Bill to Department", getNameValue(Header,"depart"));
  ListHeader("Create Date", getNameValue(Header,"credate"));
  ListHeader("Input by", dispPersNo(getNameValue(Header,"admin1")));
  if (rtrim(getNameValue(Header,"comment")) != "") ListHeader("Comment", getNameValue(Header,"comment"));
}

function setTotalValues() {
  var Sum1 = getTotalValueFor(TailList,'amount');
  var Sum2 = getTotalValueFor(TailList,'amount','charge',getReimburseReq());
  if (doesItemExist(TailList,'expense_1_amount')) {
    Sum2 = Sum2 - getTotalValueFor(TailList,'expense_1_amount','expense_1_expensetype',getPersonalReq());
    Sum2 = Sum2 - getTotalValueFor(TailList,'expense_2_amount','expense_2_expensetype',getPersonalReq());
    Sum2 = Sum2 - getTotalValueFor(TailList,'expense_3_amount','expense_3_expensetype',getPersonalReq());
    Sum2 = Sum2 - getTotalValueFor(TailList,'expense_4_amount','expense_4_expensetype',getPersonalReq());
    Sum2 = Sum2 - getTotalValueFor(TailList,'expense_5_amount','expense_5_expensetype',getPersonalReq());
    Sum2 = Sum2 - getTotalValueFor(TailList,'expense_6_amount','expense_6_expensetype',getPersonalReq());
    Sum2 = Sum2 - getTotalValueFor(TailList,'expense_7_amount','expense_7_expensetype',getPersonalReq());
    Sum2 = Sum2 - getTotalValueFor(TailList,'expense_8_amount','expense_8_expensetype',getPersonalReq());
    Sum2 = Sum2 - getTotalValueFor(TailList,'expense_9_amount','expense_9_expensetype',getPersonalReq());
    Sum2 = Sum2 - getTotalValueFor(TailList,'expense_10_amount','expense_10_expensetype',getPersonalReq());
    Sum2 = Sum2 - getTotalValueFor(TailList,'expense_11_amount','expense_11_expensetype',getPersonalReq());
  } else {
    Sum2 = Sum2 - getTotalValueFor(TailList,'amount','expense_1_expensetype',getPersonalReq());
  }
  Sum2 = Sum2 - getTotalSubListValue(TailList,'expenselist','amount','expensetype',getPersonalReq());
  var Sum3 = getTotalValueFor(TailList,'amount','charge',getAdvanceReq());
  var Sum4 = getTotalValueFor(TailList,'amount','charge',getReturnedReq());
  var Sum5 = Sum2 + Sum4 - Sum3;  
  var Sum6 = Sum1 - (Sum4 + Sum3);
  setNameValue(Header,"rcamt",format(Sum6.toString(10),2));
  setNameValue(Header,"reamt",format(Sum5.toString(10),2));
  setNameValue(Header,"adamt", format(Sum3.toString(10),2));
  var regexp = /'/g ;
  var processStr = getNameValue(parent.contents.Header, "comment"); 
  processStr = processStr.replace(regexp,"");
  regexp = /\n/g ;
  processStr = processStr.replace(regexp," ");
  regexp = /\r/g ;
  processStr = processStr.replace(regexp,"");
  if (processStr.length > 60) processStr = processStr.substring(0,60);   //jh 2003-5-2
  setNameValue(Header,"comment", processStr);
}

function setRepTotals() {
  var Sum1 = getTotalValueFor(TailList,'amount');
  ListHeader("Total Report", format(Sum1.toString(10),2));
  var SumX = getTotalValueFor(TailList,'amount','charge',getAdvanceDef() + ";" + getReturnedDef() + ";" + getPersonalDef() + ";"); 
  SumX = Sum1 - SumX
  ListHeader("Total Expenses", format(SumX.toString(10),2));
  var Sum2 = getTotalValueFor(TailList,'amount','charge',getReimburseReq());
  if (doesItemExist(TailList,'expense_1_amount')) {
    Sum2 = Sum2 - getTotalValueFor(TailList,'expense_1_amount','expense_1_expensetype',getPersonalReq());
    Sum2 = Sum2 - getTotalValueFor(TailList,'expense_2_amount','expense_2_expensetype',getPersonalReq());
    Sum2 = Sum2 - getTotalValueFor(TailList,'expense_3_amount','expense_3_expensetype',getPersonalReq());
    Sum2 = Sum2 - getTotalValueFor(TailList,'expense_4_amount','expense_4_expensetype',getPersonalReq());
    Sum2 = Sum2 - getTotalValueFor(TailList,'expense_5_amount','expense_5_expensetype',getPersonalReq());
    Sum2 = Sum2 - getTotalValueFor(TailList,'expense_6_amount','expense_6_expensetype',getPersonalReq());
    Sum2 = Sum2 - getTotalValueFor(TailList,'expense_7_amount','expense_7_expensetype',getPersonalReq());
    Sum2 = Sum2 - getTotalValueFor(TailList,'expense_8_amount','expense_8_expensetype',getPersonalReq());
    Sum2 = Sum2 - getTotalValueFor(TailList,'expense_9_amount','expense_9_expensetype',getPersonalReq());
    Sum2 = Sum2 - getTotalValueFor(TailList,'expense_10_amount','expense_10_expensetype',getPersonalReq());
    Sum2 = Sum2 - getTotalValueFor(TailList,'expense_11_amount','expense_11_expensetype',getPersonalReq());
  } else {
    Sum2 = Sum2 - getTotalValueFor(TailList,'amount','expense_1_expensetype',getPersonalReq());
  }
  Sum2 = Sum2 - getTotalSubListValue(TailList,'expenselist','amount','expensetype',getPersonalReq());
  ListHeader("Reimbursables", format(Sum2.toString(10),2));
  var SumY = SumX - Sum2;
  ListHeader("Prepaid/Personal", format(SumY.toString(10),2));
  var Sum3 = getTotalValueFor(TailList,'amount','charge',getAdvanceReq());
  ListHeader("Advances", format(Sum3.toString(10),2));
  var Sum4 = getTotalValueFor(TailList,'amount','charge',getReturnedReq());
  ListHeader("Returned Funds", format(Sum4.toString(10),2));
  var Sum5 = Sum2 + Sum4 - Sum3;
  if (ReportIsSaved) {
    ListHeader("Amount Due", format(Sum5.toString(10),2));
  } else {
    ListHeader("Amount Due", format(Sum5.toString(10),2),"javascript:void parent.contents.OnlyIfChanged('" + defaultHome + "saveXMLFile.html" + "')","Save&nbsp;to&nbsp;Server");
  }
}

function getListDisplay(x) {
  var xStr = [1,2,3];
  if (x == "expenselist") {
     xStr = ["expdate","expensetype","amount"];
  } else if (x== "displaylist") {
     xStr = ["EXP_DATE","EXPENSE","AMOUNT","PURPOSE"];
  }
  return xStr; 
}


function getHLTitles() {
  var c1 = new TransCell("c1","Ref");
  var c2 = new TransCell("c2","Beg Date");
  var c3 = new TransCell("c3","End Date");
  var c4 = new TransCell("c4","Detail");
  var Titles = new ListItem("title",[c1,c2,c3,c4]);
  return Titles;
}
function getHLPrint() {
  var ThisList = ["xref","begdate","enddate","location","comment","project","client","clientno"];
  return ThisList;
}

function getHLSubLines() {
  var ThisList = [["split_","_project","_clientno","_client","$Split%:","_weight"]];
  return ThisList;
}

function getTLTitles() {
  var c1 = new TransCell("c1","Date");
  var c2 = new TransCell("c2","Amount");
  var c3 = new TransCell("c3","Type");
  var c4 = new TransCell("c4","Detail");
  var Titles = new ListItem("title",[c1,c2,c3,c4]);
  return Titles;
}
function getTLPrint() {
  //the $ is used to indicate a literal for the 4+ items found in the detail
  //the last two varialbes can handle screens that use a receipt purpose instead of an expense purpose
  var ThisList = ["rcptdate","amount","charge","$Purpose:","purpose","expense_1_purpose"];
  return ThisList;
}

function getTLSubLines() {
  var ThisList = [["expense_","_expensetype","_amount","_comment"],["expenselist","expensetype","amount","comment"]];
  return ThisList;
}

function getHLFormat() {
  var ThisList = ["","","",""];
  return ThisList;
}
function getTLFormat() {
  var ThisList = ["","align=\"right\" nowrap=\"yes\"","",""];
  return ThisList;
}

//The functions check a specific code for applicability or return a default value

function getMileageReadOnly() {
 return false;
}

function getAllowNegative() {
 return true;
}

function getRequiredItem(xFld) {
  retVal = false;
  if(xFld.toLowerCase() == "title") retVal = true;           //put this in the system.xml
  if(xFld.toLowerCase() == "skippopulate") retVal = false;
  return retVal;
}

//These functions return list, which are generally used for selection purposes

//These are billing control functions

function companyBillCheck(x,y,z) {  //BillCheck
  var retVal = true;
  return retVal; 
}

function companyBillLoad(x,y,z) {
  if (z < HeadList.length) {
  switch (x) {
   case "trans1" :
     var b = getItemValue(HeadList[z],"billtype");
     if (b != "") {
        setListDefault(y,b);
     } else {
        var c = getItemValue(HeadList[z],"split_1_billtype");
        if (c == "" || c == "No") c = getItemValue(HeadList[z],"split_2_billtype");
        if (c == "" || c == "No") c = getItemValue(HeadList[z],"split_3_billtype");
        if (c == "" || c == "No") c = getItemValue(HeadList[z],"split_4_billtype");
        if (c != "") {
           setListDefault(y,c);
        } else {
           setListDefault(y,"No"); 
        } 
     }
     break;
  } 
  }
}

function checkProject(x) {
 if (x == null) x = "";
 x = parent.contents.alltrim(x);
 if (x.length == 0 || x.length >= 4 ) {
   return true;
 } else {
   alert("Acct/Project # must be 4 or greater characters");
   return false;
 }
}

function checkClientNo(x) {
 if (x.length < 17) {
   return true;
 } else {
   alert("Client number cannot be greater than 16 characters");
   return false;
 }
}

function checkLocation(x) {
 if (alltrim(x) != "") {
   return true;
 } else {
   alert("Location must be specified");
   return false;
 }
}

function checkRemapPurpose(purposeRef)
{
   var indx = 0;
   for (var i = 0; i < HeadList.length; i++) {
       if (purposeRef == getXref(i)) {
          indx = i;
          i = HeadList.length;
       }
   }
   reMapPurpose(TailList, purposeRef, indx); 
}

function checkRemap(objExpType,objPurpose)
{
   var indx;
   var curExp = objExpType.value;
   if (objPurpose == null) {
       indx = HeadList.length -1;
   } else {  
       indx = objPurpose.selectedIndex;
   }
   objExpType.value = reMapExpense(indx, curExp); 
}

function reMapPurpose(dBase,purposeRef,indx) { 
  var value;
  var tag;
  var referenceTag;
  var prefixLen
  var prefix;
  for (var i = 0; i < dBase.length; i++) {
    value = dBase[i][1];
    if (typeof(value) != "string") {
       reMapPurpose(value,purposeRef,indx);
    } else {
       tag = dBase[i][0];
       prefixLen = tag.indexOf("expensetype");
       if (prefixLen > -1) {
          referenceTag = tag.substring(0,prefixLen);
          if (getNameValueSubstr(dBase,referenceTag + "xref") == purposeRef) {
             dBase[i][1] = reMapExpense(indx, value)
          } else if (getNameValueSubstr(dBase,"xref") == purposeRef) {
             dBase[i][1] = reMapExpense(indx, value)
          }
       }
    }
  }
}

function reMapExpense(indx, curExp)
{
  //See ExampleProfiles for code example
  return curExp; 
}


// Do not make changes below this point 
*/
</SCRIPT>

<%@ include file="../CProfileForm.jsp" %>
<head>
<meta http-equiv="Pragma" content="no-cache">
<meta http-equiv="Expires" content="-1">
</head>
</html>
<% Extract.close(); %>
